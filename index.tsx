
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import ReactDOM from 'react-dom/client';

const WORD_LIST_TEXT = `
I. ЕСІМДІКТЕР (Местоимения) – 30 слов
мен – [мен] – я
сен – [сен] – ты
сіз – [сиз] – Вы (уваж. ед.ч.)
ол – [ол] – он, она, оно
біз – [биз] – мы
сендер – [сен-де́р] – вы (мн.ч., к равным/младшим)
сіздер – [сиз-де́р] – вы (мн.ч., уваж.)
олар – [о-ла́р] – они
кім – [ким] – кто
не – [не] – что
бұл – [бул] – это, этот, эта
сол – [сол] – то, тот, та
анау – [а-на́у] – вон то, вон тот, вон та
мынау – [мы-на́у] – вот это, вот этот (ближе чем бұл)
өзім – [оь-зы́м] – я сам
өзің – [оь-зы́н(г)] – ты сам
өзі – [оь-зы́] – он/она/оно сам(а/о)
өздері – [оьз-де-ри́] – они сами
әркім – [аьр-ки́м] – каждый (человек)
әрқайсысы – [аьр-кай-сы-сы́] – каждый (из группы)
ешкім – [еш-ки́м] – никто
ешнәрсе / ештеңе – [еш-наьр-се́ / еш-те-н(г)е́] – ничего
бәрі – [баь-ри́] – всё, все
барлығы – [бар-лы-гы́] – все, всё (полностью)
кейбіреу(лер) – [кей-би-ре́у(-лер)] – некоторые
біреу – [би-ре́у] – кто-то, некто
бірнеше – [бир-не-ше́] – несколько
қандай – [кан-да́й] – какой, какая, какое
қайсы – [кай-сы́] – который (из)
басқа – [бас-ка́] – другой, иной
II. ЗАТ ЕСІМДЕР (Существительные) – 200 слов
адам – [а-да́м] – человек
бала – [ба-ла́] – ребенок, мальчик
қыз – [кыз] – девочка, девушка
ұл – [ул] – сын, мальчик
еркек – [ер-ке́к] – мужчина
әйел – [аь-е́ль] – женщина
ата – [а-та́] – дедушка
әже – [аь-же́] – бабушка
ана – [а-на́] – мать
әке – [аь-ке́] – отец
аға – [а-га́] – старший брат
іні – [и-ни́] – младший брат
әпке – [аьп-ке́] – старшая сестра
сіңлі – [син(г)-ли́] – младшая сестра (для мужчины)
қарындас – [ка-рын-да́с] – младшая сестра (для женщины)
немере – [не-ме-ре́] – внук, внучка
жиен – [жи-е́н] – племянник, племянница (по сестре)
туыс(қан) – [ту-ы́с(-кан)] – родственник
дос – [дос] – друг
көрші – [коьр-ши́] – сосед
қонақ – [ко-на́к] – гость
отбасы – [от-ба-сы́] – семья
үй – [уй] – дом
пәтер – [паь-те́р] – квартира
бөлме – [боьль-ме́] – комната
ас үй – [ас уй] – кухня
есік – [е-си́к] – дверь
терезе – [те-ре-зе́] – окно
қабырға – [ка-быр-га́] – стена
төбе – [тоь-бе́] – потолок, вершина
еден – [е-де́н] – пол
үстел – [ус-те́ль] – стол
орындық – [о-рын-ды́к] – стул
төсек – [тоь-се́к] – кровать, постель
шкаф (киім ілгіш) – [шкаф (ки-и́м иль-ги́ш)] – шкаф
шам – [шам] – лампа, свеча
кілем – [ки-ле́м] – ковер
қала – [ка-ла́] – город
ауыл – [а-у́л] – село, аул
көше – [коь-ше́] – улица
алаң – [а-ла́н(г)] – площадь
мектеп – [мек-те́п] – школа
университет – [у-ни-вер-си-те́т] – университет
балабақша – [ба-ла-бак-ша́] – детский сад
жұмыс – [жу-мы́с] – работа
кеңсе – [кен(г)-се́] – офис
кітап – [ки-та́п] – книга
дәптер – [даьп-те́р] – тетрадь
қалам – [ка-ла́м] – ручка
қарындаш – [ка-рын-да́ш] – карандаш
су – [су] – вода
нан – [нан] – хлеб
ас / тамақ – [ас / та-ма́к] – еда, пища
шай – [шай] – чай
кофе – [ко́-фе] – кофе
сүт – [сут] – молоко
ет – [ет] – мясо
балық – [ба-лы́к] – рыба
жұмыртқа – [жу-мырт-ка́] – яйцо
май – [май] – масло, жир
ірімшік – [и-рим-ши́к] – сыр
қант – [кант] – сахар
тұз – [туз] – соль
жеміс – [же-ми́с] – фрукт
алма – [ал-ма́] – яблоко
көкөніс – [коь-коь-ни́с] – овощ
картоп – [кар-то́п] – картофель
сорпа – [сор-па́] – суп
кәмпит – [каьм-пи́т] – конфета
сусын – [су-сы́н] – напиток
күн – [кун] – день, солнце
түн – [тун] – ночь
таң – [тан(г)] – утро, рассвет
кеш – [кеш] – вечер
түс (мезгіл) – [тус] – полдень
уақыт – [уа-кы́т] – время
сағат – [са-га́т] – час, часы (прибор)
минут – [ми-ну́т] – минута
секунд – [се-ку́нд] – секунда
апта – [ап-та́] – неделя
ай – [ай] – месяц, луна
жыл – [жыл] – год
ғасыр – [га-сы́р] – век, столетие
заман – [за-ма́н] – эпоха, время
болашақ – [бо-ла-ша́к] – будущее
өткен (шақ) – [оьт-ке́н (шак)] – прошлое
ақша – [ак-ша́] – деньги
баға – [ба-га́] – цена
жол – [жол] – дорога, путь
көлік – [коь-ли́к] – транспорт
машина / мәшине – [ма-ши́-на / маь-ши-не́] – машина
автобус – [ав-то́-бус] – автобус
пойыз – [по́-йыз] – поезд
ұшақ – [у-ша́к] – самолет
бас – [бас] – голова
шаш – [шаш] – волосы
бет – [бет] – лицо, страница
көз – [коьз] – глаз
мұрын – [му-ры́н] – нос
ауыз – [а-у́з] – рот
тіс – [тис] – зуб
тіл – [тил] – язык
құлақ – [ку-ла́к] – ухо
мойын – [мо-йы́н] – шея
иық – [и-ы́к] – плечо
қол – [кол] – рука
саусақ – [сау-са́к] – палец
кеуде – [кеу-де́] – грудь
арқа – [ар-ка́] – спина
іш – [иш] – живот, внутренность
аяқ – [а-я́к] – нога
тізе – [ти-зе́] – колено
жүрек – [жу-ре́к] – сердце
өкпе – [оьк-пе́] – легкое
қан – [кан] – кровь
денсаулық – [ден-сау-лы́к] – здоровье
ауру (сырқат) – [ау-ру́ (сыр-ка́т)] – болезнь
дәрі – [даь-ри́] – лекарство
аурухана – [ау-ру-ха-на́] – больница
дәрігер – [даь-ри-ге́р] – врач
мұғалім – [му-га-ли́м] – учитель
оқушы – [о-ку-шы́] – ученик
студент – [сту-де́нт] – студент
инженер – [ин-же-не́р] – инженер
сатушы – [са-ту-шы́] – продавец
жүргізуші – [жур-гу-зу-шы́] – водитель
құрылысшы – [ку-ры-лыс-шы́] – строитель
жер – [жер] – земля
аспан – [ас-па́н] – небо
бұлт – [булт] – облако
жаңбыр – [жан(г)-бы́р] – дождь
қар – [кар] – снег
жел – [жель] – ветер
жұлдыз – [жул-ды́з] – звезда
ағаш – [а-га́ш] – дерево
жапырақ – [жа-пы-ра́к] – лист (дерева)
гүл – [гуль] – цветок
шөп – [шоьп] – трава
тау – [та́у] – гора
өзен – [оь-зе́н] – река
көл – [коьл] – озеро
теңіз – [те-н(г)и́з] – море
мұхит – [му-хи́т] – океан
орман – [ор-ма́н] – лес
дала – [да-ла́] – степь, поле
құм – [кум] – песок
тас – [тас] – камень
жануар – [жа-ну-а́р] – животное
ит – [ит] – собака
мысық – [мы-сы́к] – кошка
ат (жылқы) – [ат (жыл-кы́)] – лошадь
сиыр – [си-ы́р] – корова
қой – [кой] – овца
ешкі – [еш-ки́] – коза
шошқа – [шош-ка́] – свинья
тауық – [та-у́к] – курица
құс – [кус] – птица
аю – [а-ю́] – медведь
қасқыр – [кас-кы́р] – волк
түлкі – [туль-ки́] – лиса
қоян – [ко-я́н] – заяц
сөз – [соьз] – слово
әріп – [аь-ри́п] – буква
сан – [сан] – число, цифра
дыбыс – [ды-бы́с] – звук
ән – [аьн] – песня
музыка / әуен – [му́-зы-ка / аьу-е́н] – музыка
хат – [хат] – письмо
сурет – [су-ре́т] – картина, фотография, рисунок
сабақ – [са-ба́к] – урок
емтихан – [ем-ти-ха́н] – экзамен
білім – [би-ли́м] – знание
ғылым – [гы-лы́м] – наука
өнер – [оь-не́р] – искусство, ремесло
спорт – [спорт] – спорт
ойын – [о-йы́н] – игра
ойыншық – [о-йын-шы́к] – игрушка
дүкен – [ду-ке́н] – магазин
базар – [ба-за́р] – рынок
ауа – [а-уа́] – воздух
от – [от] – огонь
түс (бояу) – [тус (бо-я́у)] – цвет
дауыс – [да-у́с] – голос
ел – [ел] – страна, народ
мемлекет – [мем-ле-ке́т] – государство
халық – [ха-лы́к] – народ
заң – [зан(г)] – закон
ой – [ой] – мысль
күш – [куш] – сила
жарық – [жа-ры́к] – свет
қараңғылық – [ка-ран(г)-гы-лы́к] – темнота
себеп – [се-бе́п] – причина
нәтиже – [наь-ти-же́] – результат
мақсат – [мак-са́т] – цель
арман – [ар-ма́н] – мечта
үміт – [у-ми́т] – надежда
бақыт – [ба-кы́т] – счастье
қайғы – [кай-гы́] – горе, печаль
махаббат – [ма-хаб-ба́т] – любовь
мереке – [ме-ре-ке́] – праздник
III. ЕТІСТІКТЕР (Глаголы) – 150 слов
болу – [бо-лу́] – быть, становиться
істеу – [ис-те́у] – делать
жасау – [жа-са́у] – делать, создавать
бару – [ба-ру́] – идти, ехать
келу – [ке-лу́] – приходить, приезжать
көру – [коь-ру́] – видеть, смотреть
қарау – [ка-ра́у] – смотреть, глядеть
айту – [ай-ту́] – сказать
сөйлеу – [соьй-ле́у] – говорить, разговаривать
әңгімелесу – [аьн(г)-ги-ме-ле-су́] – беседовать
беру – [бе-ру́] – давать
алу – [а-лу́] – брать, получать
білу – [би-лю́] – знать
оқу – [о-ку́] – читать, учиться
жазу – [жа-зу́] – писать
тұру – [ту-ру́] – стоять, жить, вставать
отыру – [о-ты-ру́] – сидеть
жату – [жа-ту́] – лежать
жеу – [же́у] – есть, кушать
ішу – [и-шу́] – пить
ұйықтау – [у-йык-та́у] – спать
ояну – [о-я-ну́] – просыпаться
жүру – [жу-ру́] – ходить, двигаться
жүгіру – [жу-гу-ру́] – бежать
ұшу – [у-шу́] – летать
жүзу – [жу-зу́] – плавать
күлу – [ку-лю́] – смеяться
жылау – [жы-ла́у] – плакать
ойлау – [ой-ла́у] – думать
сұрау – [су-ра́у] – спрашивать, просить
жауап беру – [жа-уа́п бе-ру́] – отвечать
тыңдау – [тын(г)-да́у] – слушать
есту – [ес-ту́] – слышать
ұнату – [у-на-ту́] – нравиться
жақсы көру – [жак-сы́ коь-ру́] – любить (кого-то, что-то)
сүю – [су-ю́] – любить (романтически), целовать
жек көру – [жек коь-ру́] – ненавидеть
көмектесу – [коь-мек-те-су́] – помогать
іздеу – [из-де́у] – искать
табу – [та-бу́] – находить
жоғалту – [жо-гал-ту́] – терять
сату – [са-ту́] – продавать
сатып алу – [са-ты́п а-лу́] – покупать
ашу – [а-шу́] – открывать, сердиться
жабу – [жа-бу́] – закрывать
кіру – [ки-ру́] – входить
шығу – [шы-гу́] – выходить
бастау – [бас-та́у] – начинать
аяқтау / бітіру – [а-як-та́у / би-ти-ру́] – заканчивать
түсіну – [ту-си-ну́] – понимать
түсіндіру – [ту-син-ди-ру́] – объяснять
ойнау – [ой-на́у] – играть
күту – [ку-ту́] – ждать
қорқу – [кор-ку́] – бояться
шақыру – [ша-кы-ру́] – звать, приглашать
төлеу – [тоь-ле́у] – платить
жұмыс істеу – [жу-мы́с ис-те́у] – работать
демалу – [де-ма-лу́] – отдыхать
өмір сүру – [оь-ми́р су-ру́] – жить, существовать
өлу – [оь-лю́] – умирать
туылу – [ту-ы-лу́] – рождаться
пісіру – [пи-си-ру́] – готовить (еду)
көрсету – [коьр-се-ту́] – показывать
сезу – [се-зу́] – чувствовать
ұстау – [ус-та́у] – держать
жіберу – [жи-бе-ру́] – отправлять, отпускать
құю – [ку-ю́] – лить, наливать
өсу – [оь-су́] – расти
кесу – [ке-су́] – резать
салу – [са-лу́] – класть, ложить, строить, наливать (чай)
алып келу – [а-лы́п ке-лю́] – приносить
алып кету – [а-лы́п ке-ту́] – уносить, забирать
ұмыту – [у-мы-ту́] – забывать
есте сақтау / еске алу – [ес-те́ сак-та́у / ес-ке́ а-лу́] – помнить / вспоминать
үйрену – [уй-ре-ну́] – учиться (чему-то), привыкать
үйрету – [уй-ре-ту́] – учить (кого-то)
кию – [ки-ю́] – надевать (одежду)
шешу (киімді) – [ше-шу́] – снимать (одежду)
жуу – [жу-у́] – мыть, стирать
тазалау – [та-за-ла́у] – чистить
жинау – [жи-на́у] – собирать, убирать
шаршау – [шар-ша́у] – уставать
ауыру (етістік) – [ау-ы-ру́] – болеть
емдеу – [ем-де́у] – лечить
қуану – [ку-а-ну́] – радоваться
ренжу – [рен-жу́] – обижаться
ашулану – [а-шу-ла-ну́] – злиться, сердиться
сөйлесу – [соьй-ле-су́] – разговаривать, общаться
кездесу – [кез-де-су́] – встречаться
қоштасу – [кош-та-су́] – прощаться
сағыну – [са-гы-ну́] – скучать
сену – [се-ну́] – верить, доверять
үміттену – [у-мит-те-ну́] – надеяться
армандау – [ар-ман-да́у] – мечтать
шешу (мәселені) – [ше-шу́] – решать (проблему)
таңдау – [тан(г)-да́у] – выбирать
құттықтау – [кут-тык-та́у] – поздравлять
сыйлау – [сый-ла́у] – уважать, дарить подарок
сыйлық беру – [сый-лы́к бе-ру́] – дарить подарок
ұту – [у-ту́] – выигрывать
ұтылу – [у-ты-лу́] – проигрывать
тексеру – [тек-се-ру́] – проверять
өзгерту – [оьз-гер-ту́] – изменять
өзгеру – [оьз-ге-ру́] – изменяться
жалғастыру – [жал-гас-ты-ру́] – продолжать
тоқтату – [ток-та-ту́] – останавливать
тоқтау – [ток-та́у] – останавливаться
қолдану – [кол-да-ну́] – использовать, применять
рұқсат ету – [рук-са́т е-ту́] – разрешать
тыйым салу – [тый-ы́м са-лу́] – запрещать
жету – [же-ту́] – достигать, добираться, хватать
тасымалдау – [та-сы-мал-да́у] – перевозить
көшіру – [коь-ши-ру́] – копировать, переписывать, переезжать
көшу – [коь-шу́] – переезжать
сүру (көлікті) – [су-ру́] – водить (транспорт)
сурет салу – [су-ре́т са-лу́] – рисовать
ән айту / ән салу – [аьн ай-ту́ / аьн са-лу́] – петь
билеу – [би-ле́у] – танцевать
құру – [ку-ру́] – строить, создавать, основывать
бұзу – [бу-зу́] – ломать, разрушать, нарушать
жөндеу – [жоьн-де́у] – ремонтировать, чинить
дайындау – [дай-ын-да́у] – готовить, подготавливать
дайындалу – [дай-ын-да-лу́] – готовиться
шаруа істеу – [ша-ру-а́ ис-те́у] – заниматься хозяйством, работать по дому
саяхаттау – [са-я-хат-та́у] – путешествовать
деп атау – [деп а-та́у] – называть(ся)
салыстыру – [са-лыс-ты-ру́] – сравнивать
келісу – [ке-ли-су́] – соглашаться
қарсы болу – [кар-сы́ бо-лу́] – быть против
құлау – [ку-ла́у] – падать
көтеру – [коь-те-ру́] – поднимать
түсіру – [ту-си-ру́] – спускать, снижать, фотографировать
ілу – [и-лю́] – вешать
апару – [а-па-ру́] – относить, отвозить
әкелу – [аь-ке-лю́] – приносить, привозить
шешу (жұмбақты) – [ше-шу́] – разгадывать (загадку)
толтыру – [тол-ты-ру́] – наполнять, заполнять
босату – [бо-са-ту́] – освобождать, опустошать
жабу (жараны) – [жа-бу́] – закрывать (рану), перевязывать
орау – [о-ра́у] – заворачивать, обматывать
асығу – [а-сы-гу́] – торопиться, спешить
кешігу – [ке-ши-гу́] – опаздывать
тамақтандыру – [та-мак-тан-ды-ру́] – кормить
тамақтану – [та-мак-та-ну́] – питаться, кушать
серуендеу – [се-ру-ен-де́у] – гулять, прогуливаться
тырысу – [ты-ры-су́] – стараться, пытаться
таң қалу – [тан(г) ка-лу́] – удивляться
еліктеу – [е-лик-те́у] – подражать
орындау – [о-рын-да́у] – выполнять, исполнять
талап ету – [та-ла́п е-ту́] – требовать
IV. СЫН ЕСІМДЕР (Прилагательные) – 80 слов
жақсы – [жак-сы́] – хороший
жаман – [жа-ма́н] – плохой
үлкен – [уль-ке́н] – большой
кішкентай / кіші – [киш-кен-та́й / ки-ши́] – маленький
жаңа – [жа-н(г)а́] – новый
ескі – [ес-ки́] – старый
әдемі / сұлу – [аь-де-ми́ / су-лу́] – красивый
көріксіз / ұсқынсыз – [коь-рик-си́з / ус-кын-сы́з] – некрасивый
керемет – [ке-ре-ме́т] – замечательный, прекрасный
оңай – [он(г)-а́й] – легкий (не сложный)
қиын – [кы-йы́н] – трудный, сложный
таза – [та-за́] – чистый
лас / кір – [лас / кир] – грязный
ыстық – [ыс-ты́к] – горячий, жаркий
суық – [су-ы́к] – холодный
жылы – [жы-лы́] – теплый
салқын – [сал-кы́н] – прохладный
биік – [би-и́к] – высокий
аласа – [а-ла-са́] – низкий
ұзын – [у-зы́н] – длинный
қысқа – [кыс-ка́] – короткий
кең – [кен(г)] – широкий
тар – [тар] – узкий
ақ – [ак] – белый
қара – [ка-ра́] – черный
қызыл – [кы-зы́л] – красный
көк – [коьк] – синий, голубой, (реже) зеленый (небо, трава)
сары – [са-ры́] – желтый
жасыл – [жа-сы́л] – зеленый (цвет предметов)
қоңыр – [ко-н(г)ы́р] – коричневый
сұр – [сур] – серый
қызғылт – [кыз-гыл́т] – розовый
күлгін – [куль-ги́н] – фиолетовый, сиреневый
тез – [тез] – быстрый (также наречие)
ақырын / жай – [а-кы-ры́н / жай] – медленный (также наречие)
ауыр – [а-у́р] – тяжелый
жеңіл – [жен(г)-и́ль] – легкий (по весу)
ақылды – [а-кыл-ды́] – умный
ақымақ – [а-кы-ма́к] – глупый
мықты – [мык-ты́] – сильный, крепкий
әлсіз – [аьль-си́з] – слабый
бай – [бай] – богатый
кедей – [ке-де́й] – бедный
жас – [жас] – молодой
кәрі – [каь-ри́] – старый (о людях, животных)
аш – [аш] – голодный
тоқ – [ток] – сытый
дұрыс – [ду-ры́с] – правильный
қате / бұрыс – [ка-те́ / бу-ры́с] – неправильный, ошибочный
пайдалы – [пай-да-лы́] – полезный
зиянды – [зи-ян-ды́] – вредный
қымбат – [кым-ба́т] – дорогой (о цене)
арзан – [ар-за́н] – дешевый
тәтті – [таьт-ти́] – сладкий
ащы – [аш-шы́] – горький
қышқыл – [кыш-кы́л] – кислый
тұзды – [туз-ды́] – соленый
бос – [бос] – свободный, пустой
толы / толық – [то-лы́ / то-лы́к] – полный, наполненный
қуанышты / көңілді – [ку-а-ныш-ты́ / коьн(г)-иль-ди́] – радостный / веселый
мұңды / қайғылы – [мун(г)-ды́ / кай-гы-лы́] – грустный, печальный
ашулы – [а-шу-лы́] – сердитый, злой
сабырлы – [са-быр-лы́] – спокойный
белгілі – [бель-ги-ли́] – известный
бейтаныс / белгісіз – [бей-та-ны́с / бель-ги-си́з] – незнакомый / неизвестный
маңызды – [ман(г)-ыз-ды́] – важный
қызық(ты) – [кы-зы́к(-ты)] – интересный
іш пыстыратын / зеріктіретін – [иш пыс-ты-ра-ты́н / зе-рик-ти-ре-ти́н] – скучный
қауіпті – [кау-ип-ти́] – опасный
қауіпсіз – [кау-ип-си́з] – безопасный
шын(айы) – [шын(-а-йы́)] – правдивый, настоящий
жалған – [жал-га́н] – ложный, фальшивый
ашық – [а-шы́к] – открытый, ясный (о погоде), светлый (о цвете)
жабық – [жа-бы́к] – закрытый
жұмсақ – [жум-са́к] – мягкий
қатты – [кат-ты́] – твердый, громкий
әртүрлі – [аьр-тур-ли́] – разный, различный
бірдей – [бир-де́й] – одинаковый
соңғы – [сон(г)-гы́] – последний
алғашқы / бірінші – [ал-гаш-кы́ / би-рин-ши́] – первый, начальный
V. ҮСТЕУЛЕР (Наречия) – 50 слов
бүгін – [бу-гу́н] – сегодня
ертең – [ер-те́н(г)] – завтра
кеше – [ке-ше́] – вчера
қазір – [ка-зи́р] – сейчас
сосын / кейін – [со-сы́н / ке-йи́н] – потом, затем, после
бұрын – [бу-ры́н] – раньше, прежде
әлі – [аь-ли́] – еще, пока
енді – [ен-ди́] – теперь, вот
тез – [тез] – быстро
жылдам – [жыл-да́м] – быстро, скоро
жай / ақырын – [жай / а-кы-ры́н] – медленно
көп – [коьп] – много
аз – [аз] – мало
өте – [оь-те́] – очень
тым – [тым] – слишком
сәл / біраз – [саьль / би-ра́з] – немного, чуть-чуть
мұнда / осында – [мун-да́ / о-сын-да́] – здесь, тут
анда / сонда – [ан-да́ / сон-да́] – там
әрі – [аь-ри́] – дальше, далее
бері – [бе-ри́] – сюда, ближе
жоғары(да) – [жо-га-ры́(-да)] – вверх(у), наверху
төмен(де) – [тоь-мен́(-де)] – вниз(у), внизу
алыс(та) – [а-лы́с(-та)] – далеко
жақын(да) – [жа-кы́н(-да)] – близко, скоро
ішке(рі) – [иш-ке́(-ри)] – внутрь
сырт(қа) – [сырт(-ка́)] – наружу
бірге – [бир-ге́] – вместе
жеке – [же-ке́] – отдельно, лично
әрең – [аь-рен(г)] – едва, еле-еле
міндетті түрде – [мин-дет-ты́ турь-де́] – обязательно
әрине – [аь-ри-не́] – конечно
мүмкін – [мум-ку́н] – возможно, может быть
шынында – [шы-нын-да́] – действительно, на самом деле
таңертең – [тан(г)-ер-те́н(г)] – утром
түсте – [тус-те́] – днем, в полдень
кешке – [кеш-ке́] – вечером
түнде – [тун-де́] – ночью
жиі – [жи-и́] – часто
сирек – [си-ре́к] – редко
әрдайым / әрқашан – [аьр-да-йы́м / аьр-ка-ша́н] – всегда
ешқашан – [еш-ка-ша́н] – никогда
күзде – [куз-де́] – осенью
қыста – [кыс-та́] – зимой
көктемде – [коьк-тем-де́] – весной
жазда – [жаз-да́] – летом
оңай – [он(г)-а́й] – легко
қиын – [кы-йы́н] – трудно
жақсы – [жак-сы́] – хорошо
жаман – [жа-ма́н] – плохо
керісінше – [ке-ри-син-ше́] – наоборот
VI. САН ЕСІМДЕР (Числительные) – 30 слов
бір – [бир] – один
екі – [е-ки́] – два
үш – [уш] – три
төрт – [тоьрт] – четыре
бес – [бес] – пять
алты – [ал-ты́] – шесть
жеті – [же-ти́] – семь
сегіз – [се-ги́з] – восемь
тоғыз – [то-гы́з] – девять
он – [он] – десять
он бір – [он бир] – одиннадцать
он екі – [он е-ки́] – двенадцать
жиырма – [жи-ыр-ма́] – двадцать
отыз – [о-ты́з] – тридцать
қырық – [кы-ры́к] – сорок
елу – [е-лю́] – пятьдесят
алпыс – [ал-пы́с] – шестьдесят
жетпіс – [жет-пи́с] – семьдесят
сексен – [сек-се́н] – восемьдесят
тоқсан – [ток-са́н] – девяносто
жүз – [жуз] – сто
екі жүз – [е-ки́ жуз] – двести
мың – [мын(г)] – тысяча
миллион – [мил-ли-о́н] – миллион
нөл – [ноьль] – ноль
бірінші – [би-рин-ши́] – первый
екінші – [е-кин-ши́] – второй
үшінші – [у-шин-ши́] – третий
жарты – [жар-ты́] – половина
ширек – [ши-ре́к] – четверть
VII. ШЫЛАУЛАР (Служебные слова: союзы, послелоги, частицы) – 60 слов
ЖАЛҒАУЛЫҚТАР (Союзы) – 20 слов
және – [жаь-не́] – и (письм., книжн.)
мен / бен / пен (послелог, часто как союз "и") – [мен / бен / пен] – и, с
да / де / та / те (частица, часто как союз "и, тоже") – [да / де / та / те] – и, тоже, же
бірақ – [би-ра́к] – но, однако
алайда – [а-лай-да́] – однако, тем не менее
немесе / я – [не-ме-се́ / я] – или
әлде – [аьль-де́] – или (в вопросах)
сондықтан – [сон-дык-та́н] – поэтому
себебі / өйткені – [се-бе-би́ / оьйт-ке-ни́] – потому что, так как
егер – [е-ге́р] – если
ал – [ал] – а, но (противительный)
яғни – [яг-ни́] – то есть, значит
әрі ... әрі – [аь-ри́ ... аь-ри́] – и ... и
не ... не – [не ... не] – ни ... ни
дегенмен – [де-ген-ме́н] – тем не менее, все же
сонша – [сон-ша́] – настолько, так (что)
үшін (в значении "чтобы") – [у-шу́н] – чтобы (с целевым оттенком)
сайын – [са-йы́н] – по мере того как, каждый раз как
егерде – [е-гер-де́] – если бы
сөйтіп – [соьй-ти́п] – таким образом, и вот
СЕПТЕУЛІК ШЫЛАУЛАР (Послелоги) – 25 слов
21. үшін – [у-шу́н] – для, ради
22. туралы / жайында – [ту-ра-лы́ / жа-йын-да́] – о, об
23. сияқты / секілді – [си-як-ты́ / се-киль-ди́] – как, подобно
24. арқылы – [ар-кы-лы́] – через, посредством
25. бойынша – [бо-йын-ша́] – по, согласно
26. дейін / шейін – [де-йи́н / ше-йи́н] – до
27. кейін / соң – [ке-йи́н / сон(г)] – после
28. қарай / таман – [ка-ра́й / та-ма́н] – к, в сторону
29. бірге – [бир-ге́] – вместе с
30. қасында – [ка-сын-да́] – рядом с, у
31. алдында – [ал-дын-да́] – перед, впереди
32. артында – [ар-тын-да́] – за, позади
33. үстінде – [ус-тин-де́] – на, наверху
34. астында – [ас-тын-да́] – под, внизу
35. арасында – [а-ра-сын-да́] – между, среди
36. ортасында – [ор-та-сын-да́] – в середине
37. бойы / бойымен – [бо-йы́ / бо-йы-ме́н] – в течение, вдоль
38. бастап – [бас-та́п] – начиная с
39. басқа (кроме) – [бас-ка́] – кроме, помимо
40. сайын (послелог) – [са-йы́н] – каждый (день сайын - каждый день)
41. шамалы / тарта – [ша-ма-лы́ / тар-та́] – около, приблизительно (о времени, количестве)
42. арқасында – [ар-ка-сын-да́] – благодаря
43. кесірінен – [ке-си-ри-не́н] – из-за, по вине
44. қарамастан – [ка-ра-мас-та́н] – несмотря на
45. орнына – [ор-ны-на́] – вместо
ДЕКЕУЛІК ШЫЛАУЛАР (Частицы) – 15 слов
46. иә – [и-аь́] – да
47. жоқ – [жок] – нет
48. -ма / -ме / -ба / -бе / -па / -пе (вопросительная) – [ма / ме / ба / бе / па / пе] – ли
49. -шы / -ші (побудительная, просьба) – [шы / ши] – -ка (сделай-ка)
50. -ғой / -қой (утвердительно-усилительная) – [гой / кой] – же, ведь
51. -ақ / -ек / -к (ограничительно-выделительная) – [ак / ек / к] – только, лишь, же
52. тек / ғана – [тек / га-на́] – только, лишь
53. тіпті – [тип-ти́] – даже
54. да / де / та / те (соединительно-усилительная) – [да / де / та / те] – и, тоже, же
55. -мыс / -міс (предположение, слух) – [-мыс / -мис] – мол, говорят
56. әрине – [аь-ри-не́] – конечно
57. мүмкін – [мум-ку́н] – возможно (также наречие)
58. әйтеуір – [аьй-те-уи́р] – наконец-то, все-таки, как-никак
59. нақ – [нак] – именно, как раз
60. әсіресе – [аь-си-ре-се́] – особенно
`;

interface CardData {
  id: number;
  kazakh: string;
  transcription: string;
  russian: string;
  category: string;
}

const parseWordList = (text: string): { words: CardData[], categories: string[] } => {
  const lines = text.split('\n').map(line => line.trim()).filter(line => line);
  const words: CardData[] = [];
  const categorySet = new Set<string>();
  let currentCategoryKey = "Uncategorized"; // Should be overridden by a category header
  let wordIdCounter = 0;

  const categoryHeaderRegex = /^[IVXLCDM]+\.\s*.*$/; // Matches lines like "I. Category Name..."
  // Regex to remove numeric prefixes like "21. " from sub-items within some categories
  const subItemPrefixRegex = /^\d+\.\s*/;


  for (const line of lines) {
    if (categoryHeaderRegex.test(line) && line.includes('–')) { // Ensure it's a main category line with '–'
      currentCategoryKey = line;
      categorySet.add(currentCategoryKey);
    } else {
      // Attempt to parse as a word line
      const cleanLine = line.replace(subItemPrefixRegex, ''); // Remove "21. " prefixes
      const parts = cleanLine.split('–').map(p => p.trim());
      
      if (parts.length >= 3) {
        let kazakh = parts[0];
        let transcription = parts[1];
        
        if (transcription.startsWith('[') && transcription.endsWith(']')) {
          transcription = transcription.slice(1, -1).trim();
        } else {
          continue; // Skip if transcription format is not met
        }
        let russian = parts.slice(2).join(' – ').trim();

        if (kazakh.includes(' / ')) {
          kazakh = kazakh.split(' / ')[0].trim();
        }
        if (transcription.includes(' / ')) {
          transcription = transcription.split(' / ')[0].trim();
        }

        if (kazakh && transcription && russian && currentCategoryKey !== "Uncategorized") {
          words.push({
            id: wordIdCounter++,
            kazakh,
            transcription,
            russian,
            category: currentCategoryKey
          });
        }
      }
    }
  }
  return { words, categories: ["All words", ...Array.from(categorySet)] };
};


const App: React.FC = () => {
  const { words: parsedWords, categories: parsedCategories } = useMemo(() => parseWordList(WORD_LIST_TEXT), []);

  const [allWords] = useState<CardData[]>(parsedWords);
  const [categories] = useState<string[]>(parsedCategories);
  const [selectedCategory, setSelectedCategory] = useState<string>(parsedCategories[0] || "All words");

  const [activeCardIds, setActiveCardIds] = useState<number[]>([]);
  const [currentIndexInActive, setCurrentIndexInActive] = useState<number>(0);
  const [isFlipped, setIsFlipped] = useState<boolean>(false);
  const [isSpeaking, setIsSpeaking] = useState<boolean>(false);

  const wordsInSelectedCategory = useMemo(() => {
    if (selectedCategory === "All words" || !categories.includes(selectedCategory)) {
        return allWords;
    }
    return allWords.filter(word => word.category === selectedCategory);
  }, [allWords, selectedCategory, categories]);


  const resetDeck = useCallback(() => {
    let wordsToUse = allWords;
    if (selectedCategory !== "All words" && categories.includes(selectedCategory)) {
        wordsToUse = allWords.filter(w => w.category === selectedCategory);
    }
    
    setActiveCardIds(wordsToUse.map(w => w.id).sort(() => Math.random() - 0.5));
    setCurrentIndexInActive(0);
    setIsFlipped(false);
  }, [allWords, selectedCategory, categories]);

  useEffect(() => {
    if (allWords.length > 0 && categories.length > 0) {
        resetDeck();
    }
  }, [allWords, categories, selectedCategory, resetDeck]);


  const currentCard = useMemo(() => {
    if (activeCardIds.length > 0 && currentIndexInActive < activeCardIds.length) {
      return allWords.find(word => word.id === activeCardIds[currentIndexInActive]);
    }
    return undefined;
  }, [activeCardIds, currentIndexInActive, allWords]);
  

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNext = () => {
    if (activeCardIds.length <= 1) { 
        if(activeCardIds.length === 1) setIsFlipped(false);
        return;
    }
    setCurrentIndexInActive((prevIndex) => (prevIndex + 1) % activeCardIds.length);
    setIsFlipped(false);
  };

  const handleRemove = () => {
    if (!currentCard) return;
    const newActiveCardIds = activeCardIds.filter(id => id !== currentCard.id);
    setActiveCardIds(newActiveCardIds);
    setIsFlipped(false);

    if (newActiveCardIds.length > 0 && currentIndexInActive >= newActiveCardIds.length) {
      setCurrentIndexInActive(0); 
    }
  };
  
  const handleSpeak = () => {
    if (!currentCard || isSpeaking) return;
    const utterance = new SpeechSynthesisUtterance(currentCard.kazakh);
    utterance.lang = 'kk-KZ';
    const voices = window.speechSynthesis.getVoices();
    const kazakhVoice = voices.find(voice => voice.lang === 'kk-KZ');
    if (kazakhVoice) {
      utterance.voice = kazakhVoice;
    }
    utterance.onstart = () => setIsSpeaking(true);
    utterance.onend = () => setIsSpeaking(false);
    utterance.onerror = () => setIsSpeaking(false);
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utterance);
  };

  useEffect(() => {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.getVoices(); 
    }
  }, []);

  const handleCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedCategory(event.target.value);
  };

  const styles: { [key: string]: React.CSSProperties } = {
    appContainer: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      padding: '20px',
      backgroundColor: '#f0f2f5',
      minHeight: 'calc(100vh - 40px)', 
      boxSizing: 'border-box',
    },
    select: {
      padding: '10px 15px',
      fontSize: '16px',
      borderRadius: '8px',
      border: '1px solid #ccc',
      backgroundColor: 'white',
      marginBottom: '20px',
      minWidth: '250px', 
      maxWidth: '100%',
      boxSizing: 'border-box',
      cursor: 'pointer',
      appearance: 'none', // For custom arrow later if desired
      backgroundImage: `url('data:image/svg+xml;utf8,<svg fill="black" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>')`,
      backgroundRepeat: 'no-repeat',
      backgroundPosition: 'right 10px center',
      paddingRight: '35px' // to make space for arrow
    },
    cardScene: {
      width: '350px',
      height: '220px',
      perspective: '1000px',
      margin: '0 0 20px 0', // Reduced top margin
    },
    card: {
      width: '100%',
      height: '100%',
      position: 'relative',
      transformStyle: 'preserve-3d',
      transition: 'transform 0.7s cubic-bezier(0.4, 0.0, 0.2, 1)',
      cursor: 'pointer',
      boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
      borderRadius: '12px',
    },
    cardFace: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      backfaceVisibility: 'hidden',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      textAlign: 'center',
      padding: '20px',
      boxSizing: 'border-box',
      borderRadius: '12px',
      backgroundColor: '#ffffff',
      color: '#333',
    },
    cardFront: {},
    cardBack: {
      transform: 'rotateY(180deg)',
    },
    kazakhWord: {
      fontSize: '32px',
      fontWeight: 'bold',
      marginBottom: '10px',
      color: '#0d47a1', 
    },
    transcription: {
      fontSize: '18px',
      fontStyle: 'italic',
      color: '#555',
      marginBottom: '15px',
    },
    russianWord: {
      fontSize: '28px',
      fontWeight: '500',
      color: '#2e7d32', 
    },
    speakButton: {
      background: 'none',
      border: 'none',
      fontSize: '24px',
      cursor: 'pointer',
      color: '#1976d2', 
      padding: '5px',
      position: 'absolute',
      top: '10px',
      right: '10px',
    },
    controls: {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'center',
      marginTop: '20px',
    },
    button: {
      padding: '12px 20px',
      fontSize: '16px',
      fontWeight: '500',
      borderRadius: '8px',
      border: 'none',
      cursor: 'pointer',
      margin: '8px',
      transition: 'background-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
    },
    flipButton: {
      backgroundColor: '#2196f3', 
      color: 'white',
    },
    nextButton: {
      backgroundColor: '#4caf50', 
      color: 'white',
    },
    removeButton: {
      backgroundColor: '#f44336', 
      color: 'white',
    },
    resetButton: {
      backgroundColor: '#ff9800', 
      color: 'white',
      marginTop: '20px',
    },
    infoText: {
      fontSize: '18px',
      color: '#555',
      textAlign: 'center',
      marginBottom: '15px'
    },
    counter: {
      fontSize: '14px',
      color: '#777',
      marginBottom: '10px', // Adjusted margin
      textAlign: 'center'
    }
  };

  const getShortCategoryName = (categoryKey: string) => {
    if (categoryKey === "All words") return "всех словах";
    return `"${categoryKey.split(' – ')[0]}"`;
  };


  if (allWords.length === 0 && categories.length <=1 ) { // <=1 because "All words" might be there
    return (
        <div style={styles.appContainer}>
            <p style={styles.infoText}>Список слов пуст или не удалось загрузить категории.</p>
        </div>
    );
  }
  
  const renderCategorySelector = () => (
    <select value={selectedCategory} onChange={handleCategoryChange} style={styles.select} aria-label="Выберите категорию слов">
      {categories.map(cat => (
        <option key={cat} value={cat}>{cat.split(' – ')[0]}</option> 
      ))}
    </select>
  );

  if (wordsInSelectedCategory.length === 0 && selectedCategory !== "All words" && categories.includes(selectedCategory)) {
    return (
        <div style={styles.appContainer}>
            {renderCategorySelector()}
            <p style={styles.infoText}>В категории {getShortCategoryName(selectedCategory)} нет слов.</p>
            <button 
                onClick={() => setSelectedCategory("All words")} 
                style={{...styles.button, ...styles.resetButton}}
                aria-label="Показать все слова"
            >
                Показать все слова
            </button>
        </div>
    );
  }
  
  if (activeCardIds.length === 0 && wordsInSelectedCategory.length > 0) {
    return (
      <div style={styles.appContainer}>
        {renderCategorySelector()}
        <p style={styles.infoText}>🎉 Поздравляем! Вы выучили все слова в категории {getShortCategoryName(selectedCategory)}! 🎉</p>
        <button
          onClick={resetDeck}
          style={{...styles.button, ...styles.resetButton}}
          aria-label={`Начать заново категорию ${getShortCategoryName(selectedCategory)}`}
        >
          Начать заново {selectedCategory === "All words" ? "все слова" : `эту категорию`}
        </button>
        {selectedCategory !== "All words" && (
            <button onClick={() => setSelectedCategory("All words")} style={{...styles.button, ...styles.flipButton, marginTop: '10px'}}>
                Перейти ко всем словам
            </button>
        )}
      </div>
    );
  }

  if (!currentCard && activeCardIds.length > 0) {
     // This might happen briefly if currentCard is being determined
    return <div style={styles.appContainer}>{renderCategorySelector()}<p style={styles.infoText}>Загрузка карточки...</p></div>;
  }
  
  if (!currentCard && activeCardIds.length === 0 && wordsInSelectedCategory.length > 0 ) {
     // This state means all cards in the category are removed, but the "congratulations" message above should catch this.
     // If it reaches here, it's likely an intermediate state or an edge case.
     return <div style={styles.appContainer}>{renderCategorySelector()}<p style={styles.infoText}>Нет доступных карточек в этой категории.</p></div>;
  }


  return (
    <div style={styles.appContainer} role="main">
      {renderCategorySelector()}
      <p style={styles.counter} aria-live="polite">
        {currentCard && activeCardIds.length > 0 ?
            `Карточка ${currentIndexInActive + 1} из ${activeCardIds.length}` :
            (activeCardIds.length === 0 && wordsInSelectedCategory.length > 0 ? `Все карточки в категории ${getShortCategoryName(selectedCategory)} выучены!` : `Категория: ${getShortCategoryName(selectedCategory)}`)
        }
        {` (Всего в ${selectedCategory === "All words" ? "списке" : `категории ${getShortCategoryName(selectedCategory)}`}: ${wordsInSelectedCategory.length})`}
      </p>

      {currentCard ? (
        <>
          <div style={styles.cardScene} onClick={handleFlip} role="group" aria-roledescription="flashcard">
            <div style={{ ...styles.card, transform: isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)' }}>
              <div style={{ ...styles.cardFace, ...styles.cardFront }} aria-hidden={isFlipped}>
                <div style={styles.kazakhWord}>{currentCard.kazakh}</div>
                <div style={styles.transcription}>[{currentCard.transcription}]</div>
                <button 
                  onClick={(e) => { e.stopPropagation(); handleSpeak(); }} 
                  style={styles.speakButton}
                  disabled={isSpeaking}
                  aria-label="Озвучить казахское слово"
                >
                  {isSpeaking ? '...' : '🔊'}
                </button>
              </div>
              <div style={{ ...styles.cardFace, ...styles.cardBack }} aria-hidden={!isFlipped}>
                <div style={styles.russianWord}>{currentCard.russian}</div>
              </div>
            </div>
          </div>

          <div style={styles.controls}>
            <button 
              onClick={handleFlip} 
              style={{...styles.button, ...styles.flipButton}}
              aria-label="Перевернуть карточку"
            >
              Перевернуть
            </button>
            <button 
              onClick={handleNext} 
              style={{...styles.button, ...styles.nextButton}}
              disabled={activeCardIds.length <= 1}
              aria-label="Следующая карточка"
            >
              Следующая
            </button>
            <button 
              onClick={handleRemove} 
              style={{...styles.button, ...styles.removeButton}}
              aria-label="Убрать карточку из колоды"
            >
              Убрать из колоды
            </button>
          </div>
        </>
      ) : (
        // This handles the case where there are no active cards to show, but it's not the "all learned" state yet.
        // Or if wordsInSelectedCategory is 0 from the start for "All words" (means no words parsed at all)
        <p style={styles.infoText}>
            {wordsInSelectedCategory.length === 0 && selectedCategory === "All words" ? "Слов для изучения не найдено." : 
            (wordsInSelectedCategory.length > 0 && activeCardIds.length === 0 ? "" : // This case is handled by "all learned" message
            "Выберите категорию или проверьте список слов.")}
        </p>
      )}
    </div>
  );
};

const container = document.getElementById('root');
if (container) {
  const root = ReactDOM.createRoot(container);
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
} else {
  console.error('Root element not found');
}
